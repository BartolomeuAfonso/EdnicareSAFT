/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CLINICA.view;

import CLINICA.controller.ControllerUtente;
import CLINICA.controller.ControllerUsuario;
import CLINICA.controller.ControllerExamesporFazer;
import CLINICA.controller.ControllerExamesporFazerItens;
import CLINICA.controller.ControllerServico;
import CLINICA.relatorios.RelatorioLaboratorio;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import sf.ce.conexao.ConexaoBancos;
import sf.ce.utilizacoes.Data;

/**
 *
 * @author Probook
 */
public class ResultadoProntoEditavel extends javax.swing.JFrame {

    /**
     * Creates new form ResultadoPronto
     */
    PreparedStatement ps;
    ResultSet rs;
    String nomeProduto;
    Connection con;
    Data d = new Data();
    private boolean isBHCG;
    ControllerUtente controllerUtente;
    ControllerUsuario controllerUsuario;
    RelatorioLaboratorio laboratorio = new RelatorioLaboratorio();
    ControllerExamesporFazer controllerExamesporFazer;
    ControllerExamesporFazerItens controllerExamesporFazerItens;
    ControllerServico controllerServico;

    public ResultadoProntoEditavel(String nome) {
        initComponents();
        con = new ConexaoBancos().ConexaoBD();
        controllerUsuario = new ControllerUsuario(con);
        controllerUtente = new ControllerUtente(con);
        controllerServico = new ControllerServico(con);
        int tipoUtilizador = controllerUsuario.getTipoUtilizador(nome);
        controllerExamesporFazer = new ControllerExamesporFazer(con);
        controllerExamesporFazerItens = new ControllerExamesporFazerItens(con);
        System.out.println("Nome do Medico:" + nome);
        int codigoMedico = controllerUsuario.getCodigoMedico(nome);
        jDateChooser1.setDate(new Date());
        jDateChooser2.setDate(new Date());
        if (jRadioButton6.isSelected()) {
            mostrarExame("SELECT distinct e.idexamesporFazer,p.nomeCompleto, s.designacao,e1.dataResultado FROM examesporfazer e inner join examesporfazeritems e1 on e.idexamesPorFazer=e1.codigoExames\n"
                    + "inner join pacientes p on e.codigoPaciente = p.idPaciente\n"
                    + "inner join status_exames s on s.idstatus_exames = e1.codigoStatusExame\n"
                    + "where s.designacao ='Pronto' and e1.dataResultado =current_date and codigoExamesIntegrado =0\n"
                    + "group by e.idexamesporFazer");
        }
        if (jRadioButton5.isSelected()) {
            mostrarExame("SELECT distinct e.idexamesporFazer,p.nomeCompleto, s.designacao,e1.dataResultado FROM examesporfazer e inner join examesporfazeritems e1 on e.idexamesPorFazer=e1.codigoExames\n"
                    + "inner join pacientes p on e.codigoPaciente = p.idPaciente\n"
                    + "inner join status_exames s on s.idstatus_exames = e1.codigoStatusExame\n"
                    + "where s.designacao ='Pronto' and e1.dataResultado =current_date and codigoExamesIntegrado <>0 \n"
                    + "group by e.idexamesporFazer");
        }

        setLocationRelativeTo(null);
        iconeSistema();
    }

    public void iconeSistema() {
        // URL caminho = this.getClass().getResource("/meus icons/GRest.png");
        URL caminho = this.getClass().getResource("/sf/ce/imagens/Icons/logoteste2.jpg");
        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(caminho);
        this.setIconImage(iconeTitulo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setTitle("Actualizar Resultado");

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 204)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome Completo", "Estado do Exame", "Data"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("Century Gothic", 3, 14)); // NOI18N
        jLabel2.setText("Exames Simples");

        buttonGroup1.add(jRadioButton5);
        jRadioButton5.setFont(new java.awt.Font("Century Gothic", 3, 14)); // NOI18N
        jRadioButton5.setText("NÃO");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton6);
        jRadioButton6.setFont(new java.awt.Font("Century Gothic", 3, 14)); // NOI18N
        jRadioButton6.setSelected(true);
        jRadioButton6.setText("SIM");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, "...."}
            },
            new String [] {
                "Nº Exame", "Nº Produto", "Nome do Exame", "Resultado", "Valor de Referência"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 0));
        jLabel4.setText("Nome:");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sf/ce/imagens/Icons/icons8-todo-list-32.png"))); // NOI18N
        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sf/ce/imagens/Icons/icons8-pdf-32.png"))); // NOI18N
        jButton2.setText("Imprimir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Buscar Exames por Data"));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Data 1");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Data 2");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sf/ce/imagens/Icons/icons8-search-24.png"))); // NOI18N
        jButton3.setText("Buscar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(35, 35, 35)
                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(30, 30, 30)
                .addComponent(jButton1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton5)
                                .addGap(23, 23, 23)))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 963, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jRadioButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(323, 323, 323)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(332, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int getCodigoPaciente() {
        return controllerUtente.getCodigoUtente(jLabel4.getText());
    }
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        jLabel4.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
        String codigoExame = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
        String data = jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString();
        if (jRadioButton6.isSelected()) {
            mostrarExameSolicitado("SELECT distinct e1.codigoExames as codigoExames,s.idServico as Produto,s.designacao as designacao ,e1.resultado as resultado, e1.referencia as referencia from examesporfazer e inner join examesporfazeritems e1 on e.idexamesPorFazer = e1.codigoExames\n"
                    + "inner join servicos s on e1.codigoProduto = s.idServico\n"
                    + "inner join pacientes pa on e.codigoPaciente =pa.idPaciente\n"
                    + "inner join categoriaServico c  on c.idcategoriaServico=s.codigoCategoria\n"
                    + "where date(e.dataPedido) ='" + data + "' and e1.codigoExames=" + codigoExame + " and codigoExamesIntegrado =0 and codigoCategoria=2 AND Espera ='SIM'\n"
                    + "order by e1.codigoExames");
        }
        if (jRadioButton5.isSelected()) {
            mostrarExameSolicitado1("SELECT distinct e1.codigoExames AS codigoExames,s.idServico as Produto,s.designacao as designacao,e1.referencia as referencia\n"
                    + "from examesporfazer e inner join examesporfazeritems e1 on e.idexamesPorFazer = e1.codigoExames\n"
                    + "inner join servicos s on e1.codigoProduto = s.idServico\n"
                    + "where date(e.dataPedido) ='" + data + "' and e1.codigoExames=" + codigoExame + "\n"
                    + "and codigoExamesIntegrado <>0 AND Espera ='SIM'");
        }


    }//GEN-LAST:event_jTable1MouseClicked
    public String getProduto() {
        return jTable2.getValueAt(jTable2.getSelectedRow(), 2).toString();
    }

    public int getCodigoExameAFazerItem() {
        return controllerExamesporFazer.codigoItem(getProduto(), getDatapedido(), getCodigoPaciente());
    }

    public int verificarProdutoItem(String produto) {
        return controllerServico.getCodigoProdutoItemByName(produto);
    }

    public void abrirOutroFormulario() {

        try {
            String produto = jTable2.getValueAt(jTable2.getSelectedRow(), 2).toString();
            //  String status = jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString();
            String dataPedido = jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString();
            int codigoStautsExames = 1;
            System.out.println("Status:" + codigoStautsExames);
            int codigoProduto = controllerServico.getCodigoProdutoItemByName(produto);
            controllerExamesporFazer.getResultadosProdutosItem(codigoProduto, dataPedido, getCodigoPaciente());
            int codigoExame = Integer.parseInt(jTable2.getValueAt(jTable2.getSelectedRow(), 0).toString());
            int codigoExameAFazerItem = getCodigoExameAFazerItem();

            if (verificarProdutoItem(produto) != 0) {
                if (codigoProduto != 0) {
                    System.out.println("Codigo do produto de uma merda:" + codigoProduto);
                    new ExamesPorParametros(codigoExame, dataPedido, produto, codigoStautsExames, getCodigoPaciente()).setVisible(true);
                }
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException ex) {
            System.out.println("Erro Crucial:" + ex.getMessage());
        }
    }
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        String codigoExame = jTable2.getValueAt(jTable2.getSelectedRow(), 0).toString();
        if (evt.getClickCount() == 1) {
            abrirOutroFormulario();
            System.out.println("Ultimo codigo do Exame:" + codigoExame);

        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        mostrarExame("SELECT distinct e.idexamesporFazer,p.nomeCompleto, s.designacao,e1.dataResultado FROM examesporfazer e inner join examesporfazeritems e1 on e.idexamesPorFazer=e1.codigoExames\n"
                + "inner join pacientes p on e.codigoPaciente = p.idPaciente\n"
                + "inner join status_exames s on s.idstatus_exames = e1.codigoStatusExame\n"
                + "where s.designacao ='Pronto' and e1.dataResultado =current_date and codigoExamesIntegrado =0\n"
                + "group by e.idexamesporFazer");
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        mostrarExame("SELECT distinct e.idexamesporFazer,p.nomeCompleto, s.designacao,e1.dataResultado FROM examesporfazer e inner join examesporfazeritems e1 on e.idexamesPorFazer=e1.codigoExames\n"
                + "INNER JOIN examesintegrado ex ON ex.idExamesIntegrado = e1.codigoExamesIntegrado\n"
                + "inner join pacientes p on e.codigoPaciente = p.idPaciente inner join status_exames s on s.idstatus_exames = e1.codigoStatusExame\n"
                + "where s.designacao ='Pronto' and e1.dataResultado =CURRENT_DATE AND ex.codigoCategoria=0");
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    public Date getData() {
        return d.converteDataSql(jDateChooser1.getDate());
    }

    public Date getData1() {
        return d.converteDataSql(jDateChooser2.getDate());
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jRadioButton6.isSelected()) {
            actualizarResultados();
        }
        if (jRadioButton5.isSelected()) {
            System.out.println("Entrou Aquiiiiiii");
            actualizarResultadosExamesItens();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int linha = jTable1.getSelectedRow();
        if (linha != -1) {
            int codigoExame = Integer.parseInt(jTable2.getValueAt(jTable2.getSelectedRow(), 0).toString());
            int codigoExameItengrado = controllerExamesporFazer.getCodigoExameIntegrado(codigoExame);
            String data = controllerExamesporFazer.getDataPedido(codigoExame);
            if (codigoExameItengrado != 0) {

                laboratorio.getResultadoExamesporParametro(data, data, getCodigoPaciente(), codigoExame);
//                    } else {
                laboratorio.getResultadoExamesA5(data, data, getCodigoPaciente(), codigoExame);
                //  laboratorio.getResultadoExamesA4(data, data, getCodigoPaciente(), codigoExame);
//                    }

            } else {

                laboratorio.getResultadoExames1A4(data, data, getCodigoPaciente(), codigoExame);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Seleciona antes a Tabela 2 desejada!!");
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        if (jRadioButton6.isSelected()) {
            mostrarExame("SELECT distinct e.idexamesporFazer,p.nomeCompleto, s.designacao,e1.dataResultado FROM examesporfazer e inner join examesporfazeritems e1 on e.idexamesPorFazer=e1.codigoExames\n"
                    + "inner join pacientes p on e.codigoPaciente = p.idPaciente\n"
                    + "inner join status_exames s on s.idstatus_exames = e1.codigoStatusExame\n"
                    + "where date(e.dataPedido) between '" + getData() + "' and '" + getData1() + "'  AND s.designacao ='Pronto' and codigoExamesIntegrado =0");
        }
        if (jRadioButton5.isSelected()) {
            mostrarExame("SELECT distinct e.idexamesporFazer,p.nomeCompleto, s.designacao,e1.dataResultado FROM examesporfazer e inner join examesporfazeritems e1 on e.idexamesPorFazer=e1.codigoExames\n"
                    + "INNER JOIN examesintegrado ex ON ex.idExamesIntegrado = e1.codigoExamesIntegrado\n"
                    + "inner join pacientes p on e.codigoPaciente = p.idPaciente\n"
                    + "inner join status_exames s on s.idstatus_exames = e1.codigoStatusExame\n"
                    + "where date(e.dataPedido) between '" + getData() + "' and '" + getData1() + "' AND s.designacao ='Pronto' and  ex.codigoCategoria=0");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public String getDatapedido() {
        return jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString();
    }

    public void setNomeProduto(String nomeProduto) {
        this.nomeProduto = nomeProduto;
    }

    public void actualizarResultados() {
        String resultado, referencia, produto, codigoProduto1, codigoExames;
        String factor, codigoPaciente;
        boolean result = false;
        System.out.println("Entrouuuuuuuuuuuu aqui");

        for (int i = 0; i < jTable2.getRowCount(); i++) {
            try {
                codigoExames = jTable2.getValueAt(i, 0).toString();
                String codigoProduto = jTable2.getValueAt(i, 1).toString();
                produto = jTable2.getValueAt(i, 2).toString();
                resultado = jTable2.getValueAt(i, 3).toString();
                referencia = jTable2.getValueAt(i, 4).toString();
                System.out.println("Resultado:" + resultado);
                codigoPaciente = jLabel2.getText().toUpperCase();
                if (produto.equalsIgnoreCase("BHCG") || produto.equalsIgnoreCase("BETAHCG")) {
                    isBHCG = true;
                    setNomeProduto(produto);
                }
                if (!resultado.equals("")) {
                    System.out.println("Entrou aqui");
                    controllerExamesporFazerItens.actualizarResultado1(codigoProduto, codigoExames, resultado, getDatapedido(), referencia);

                }
            } catch (java.lang.NullPointerException e) {
                System.out.println(e.getMessage());
            }
        }
        JOptionPane.showMessageDialog(null, "Análise processado com Sucesso");
    }

    public final void mostrarExame(String sql) {
        System.out.println("Teste:" + sql);
        try {
            con = new ConexaoBancos().ConexaoBD();
            PreparedStatement ps;
            ResultSet rs;
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(350);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(230);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getTableHeader().setReorderingAllowed(false);
            jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_OFF);
            jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            model.setNumRows(0);
            while (rs.next()) {
                model.addRow(new String[]{rs.getString("e.idexamesporFazer"), rs.getString("p.nomeCompleto"), rs.getString("s.designacao"), rs.getString("e1.dataResultado")

                });
            }
        } catch (Exception ex) {
            System.out.println("Erro!!!" + ex);
        }

    }

    public void mostrarExameSolicitado(String sql) {
        System.out.println("Exame Solicitado:" + sql);
        try {
            con = new ConexaoBancos().ConexaoBD();
            PreparedStatement ps;
            ResultSet rs;
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(80);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(250);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(300);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(280);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
            jTable2.getTableHeader().setReorderingAllowed(false);
            jTable2.setAutoResizeMode(jTable2.AUTO_RESIZE_OFF);
            jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            model.setNumRows(0);
            while (rs.next()) {
                model.addRow(new String[]{rs.getString("codigoExames"), rs.getString("Produto"), rs.getString("designacao"), rs.getString("resultado"), rs.getString("referencia")
                });
            }
        } catch (Exception ex) {
            System.out.println("Erro!!!" + ex);
        }

    }

    public void mostrarExameSolicitado1(String sql) {
        System.out.println("Exame Solicitado:" + sql);
        try {
            con = new ConexaoBancos().ConexaoBD();
            PreparedStatement ps;
            ResultSet rs;
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(80);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(250);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(300);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(280);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
            jTable2.getTableHeader().setReorderingAllowed(false);
            jTable2.setAutoResizeMode(jTable2.AUTO_RESIZE_OFF);
            jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            model.setNumRows(0);
            while (rs.next()) {
                model.addRow(new String[]{rs.getString("codigoExames"), rs.getString("Produto"), rs.getString("designacao"), "", rs.getString("referencia")
                });
            }
        } catch (Exception ex) {
            System.out.println("Erro!!!" + ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultadoProntoEditavel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultadoProntoEditavel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultadoProntoEditavel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultadoProntoEditavel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResultadoProntoEditavel("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    public void actualizarResultadosExamesItens() {

        String codigoExames, codigoProduto, produto, resultado, referencia;
        for (int i = 0; i < jTable2.getRowCount(); i++) {
            try {
                System.out.println("Ba aqui");
                codigoExames = jTable2.getValueAt(i, 0).toString();
                codigoProduto = jTable2.getValueAt(i, 1).toString();
                produto = jTable2.getValueAt(i, 2).toString();
                resultado = jTable2.getValueAt(i, 3).toString();
                referencia = jTable2.getValueAt(i, 4).toString();
                System.out.println("Referencia Aminhas:" + referencia);
                System.out.println("Resultado Aminhas:" + resultado);
                controllerExamesporFazerItens.actualizarResultado1(codigoProduto, codigoExames, resultado, getDatapedido(), referencia);

            } catch (java.lang.NullPointerException e) {

            }
        }
        JOptionPane.showMessageDialog(null, "Dados Actualizados com Sucesso", "", JOptionPane.INFORMATION_MESSAGE);
    }

}
