/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CLINICA.view;

import CLINICA.controller.ControllerUtente;
import CLINICA.controller.ControllerCategoria;
import CLINICA.controller.ControllerEmpresa;
import CLINICA.controller.ControllerServico;
import CLINICA.controller.ControllerUsuario;
import CLINICA.controller.ControllerMarcarcaoConsulta;
import CLINICA.relatorios.RelatorioServicos;
import java.sql.Time;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import sf.ce.utilizacoes.Data;
import CLINICA.modelo.MarcacaoConsulta;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import sf.ce.conexao.ConexaoBancos;

/**
 *
 * @author Desenvolvimento
 */
public class MarcacaoConsultas extends javax.swing.JFrame {

    ControllerServico controllerServico;
    ControllerUtente controllerBeneficiario;
    ControllerUsuario controllerUsuario;
    ControllerCategoria controllerCategoria;
    ControllerMarcarcaoConsulta controllerMarcarcaoConsulta;
    RelatorioServicos relatorioServicos = new RelatorioServicos();
    MarcacaoConsulta marcacaoConsulta = new MarcacaoConsulta();
    Data d = new Data();
    ConexaoBancos conexao;
    PreparedStatement ps;
    ControllerEmpresa controllerEmpresa;
    ResultSet rs;
    Connection con;
    int user;
    String nomeempresa;

    public MarcacaoConsultas(int codigo) {
        initComponents();
        this.user = codigo;
        controllerUsuario = new ControllerUsuario(con);
        controllerServico = new ControllerServico(con);
        controllerBeneficiario = new ControllerUtente(con);
        controllerMarcarcaoConsulta = new ControllerMarcarcaoConsulta(con);
        controllerEmpresa = new ControllerEmpresa(con);
        nomeempresa = controllerEmpresa.getNomeEmpresa();

        jComboBox3.setModel(new DefaultComboBoxModel(controllerServico.getNomeServicoHonorario().toArray()));
        jComboBox1.setModel(new DefaultComboBoxModel(controllerBeneficiario.getNomeBenefiario().toArray()));
        jComboBox2.setModel(new DefaultComboBoxModel(controllerUsuario.getNomeMedico().toArray()));
        jComboBox4.setModel(new DefaultComboBoxModel(controllerUsuario.getNomeMedico().toArray()));
        jDateChooser2.setDate(new Date());
        jDateChooser1.setDate(new Date());
        mostrarAgenda("SELECT m.idMarcacao,p.nomeCompleto,u.nomeCompleto, s.designacao, me.nomeCompleto, m.dataAtendimento FROM marcacaoconsulta m\n"
                + "INNER JOIN pacientes p on m.codigoPaciente=p.idPaciente\n"
                + "INNER JOIN servicos s on m.codigoServico = s.idServico\n"
                + "INNER JOIN medicos me on m.codigoMedico=me.idMedico\n"
                + "INNER JOIN utilizadores u on m.codigoUtilizador=u.idUtilizador"
                + "  WHERE m.dataAtendimento=CURRENT_DATE()");
        setLocationRelativeTo(null);
        iconeSistema();

    }

    public final void iconeSistema() {
        // URL caminho = this.getClass().getResource("/meus icons/GRest.png");
        URL caminho = this.getClass().getResource("/sf/ce/imagens/Icons/logoteste2.jpg");
        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(caminho);
        this.setIconImage(iconeTitulo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        hora = new javax.swing.JSpinner();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        minuto = new javax.swing.JSpinner();
        segundos = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton3 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MARCAÇÃO DE CONSULTA");
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "1. Marcação", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 12))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel1.setText("Pacientes:");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel2.setText("Consultas:");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel3.setText("Médico(a):");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel4.setText("Data de Atendimento:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel5.setText("Horas");

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel6.setText("Minutos");

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel7.setText("Segundos");

        jButton1.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sf/ce/imagens/Icons/icons8-exit-32.png"))); // NOI18N
        jButton1.setText("Sair");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sf/ce/imagens/Icons/icons8-save-32 (1).png"))); // NOI18N
        jButton2.setText("Salvar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel11.setText("Observação:");

        jTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextField1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1CaretUpdate(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel13.setText("Filtrar por Nome:");

        jLabel14.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel14.setText("Por Código:");

        jTextField2.setToolTipText("");
        jTextField2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextField2.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField2CaretUpdate(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(hora, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(minuto, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(segundos, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7))
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(minuto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(segundos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Agenda", jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "2. Buscar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 11))); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Buscar Agenda por Médico"));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel8.setText("Médico:");

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel9.setText("Data Agenda:");

        jButton3.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sf/ce/imagens/Icons/icons8-search-16.png"))); // NOI18N
        jButton3.setText("Buscar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Por Data e Médico");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jRadioButton2.setText("Por Data");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jRadioButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton2)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(9, 9, 9)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jComboBox4)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(39, 39, 39))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Paciente", "Utilizador", "Serviço", "Medico", "Data Agenda"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sf/ce/imagens/Icons/icons8-cancel-filled-32.png"))); // NOI18N
        jButton6.setText("Eliminar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sf/ce/imagens/Icons/icons8-exit-sign-32 (2).png"))); // NOI18N
        jButton8.setText("Sair");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sf/ce/imagens/Icons/icons8-save-32 (1).png"))); // NOI18N
        jButton4.setText("Alterar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sf/ce/imagens/Icons/icons8-supplier-32 (1).png"))); // NOI18N
        jButton5.setText("Remarcar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addGap(14, 14, 14)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Buscar Consultas Marcadas", jPanel4);

        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 530));
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 110));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 823, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setSize(new java.awt.Dimension(839, 569));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (horaConsultaValida()) {
            if (!limiteAtingido()) {
                salvar();
                int codigo = controllerMarcarcaoConsulta.getLastCodigoByPacienteToday(getCodigoUtente(), getDataConsulta());
                relatorioServicos.getMarcacao(codigo);
                mostrarAgenda("SELECT m.idMarcacao, p.nomeCompleto,u.nomeCompleto, s.designacao, me.nomeCompleto, m.dataAtendimento FROM marcacaoconsulta m\n"
                        + "INNER JOIN pacientes p on m.codigoPaciente=p.idPaciente\n"
                        + "INNER JOIN servicos s on m.codigoServico = s.idServico\n"
                        + "INNER JOIN medicos me on m.codigoMedico=me.idMedico\n"
                        + "INNER JOIN utilizadores u on m.codigoUtilizador=u.idUtilizador"
                        + " WHERE m.dataAtendimento=CURRENT_DATE()");
            } else {
                JOptionPane.showMessageDialog(null, "Já não vaga na Agenda do Medico!", nomeempresa, JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Verifique a data e hora da consulta!", nomeempresa, JOptionPane.ERROR_MESSAGE);

        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (jRadioButton1.isSelected()) {
            mostrarAgenda("SELECT m.idMarcacao, p.nomeCompleto,u.nomeCompleto, s.designacao, me.nomeCompleto, m.dataAtendimento FROM marcacaoconsulta m\n"
                    + "INNER JOIN pacientes p on m.codigoPaciente=p.idPaciente\n"
                    + "INNER JOIN servicos s on m.codigoServico = s.idServico\n"
                    + "INNER JOIN medicos me on m.codigoMedico=me.idMedico\n"
                    + "INNER JOIN utilizadores u on m.codigoUtilizador=u.idUtilizador\n"
                    + "WHERE DATE(dataAtendimento) ='" + getData1() + "' AND me.idMedico =" + getCodigoUtilizarMedico1());
            System.out.println("Teste:" + getCodigoUtilizarMedico1());
        } else {
            mostrarAgenda("SELECT m.idMarcacao, p.nomeCompleto,u.nomeCompleto, s.designacao, me.nomeCompleto, m.dataAtendimento FROM marcacaoconsulta m\n"
                    + "INNER JOIN pacientes p on m.codigoPaciente=p.idPaciente\n"
                    + "INNER JOIN servicos s on m.codigoServico = s.idServico\n"
                    + "INNER JOIN medicos me on m.codigoMedico=me.idMedico\n"
                    + "INNER JOIN utilizadores u on m.codigoUtilizador=u.idUtilizador\n"
                    + "WHERE DATE(dataAtendimento) ='" + getData1() + "'");
        }
        System.out.println("Teste:" + getCodigoUtilizarMedico1());


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1CaretUpdate
        jComboBox1.setModel(new DefaultComboBoxModel(controllerBeneficiario.getNome(jTextField1.getText()).toArray()));
    }//GEN-LAST:event_jTextField1CaretUpdate

    private void jTextField2CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField2CaretUpdate
        if (!jTextField2.getText().isEmpty()) {
            jComboBox1.setModel(new DefaultComboBoxModel(controllerBeneficiario.getCodigo(Integer.parseInt(jTextField2.getText().trim())).toArray()));
        }

    }//GEN-LAST:event_jTextField2CaretUpdate

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        hide();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int codigo = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
        int resposta = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir?", "Atenção", JOptionPane.YES_NO_OPTION);
        if (resposta == JOptionPane.YES_OPTION) {
            controllerMarcarcaoConsulta.eliminar(codigo);
            JOptionPane.showMessageDialog(null, "Consulta eliminada com Sucesso");
            mostrarAgenda("SELECT m.idMarcacao, p.nomeCompleto,u.nomeCompleto, s.designacao, me.nomeCompleto, m.dataAtendimento FROM marcacaoconsulta m\n"
                    + "INNER JOIN pacientes p on m.codigoPaciente=p.idPaciente\n"
                    + "INNER JOIN servicos s on m.codigoServico = s.idServico\n"
                    + "INNER JOIN medicos me on m.codigoMedico=me.idMedico\n"
                    + "INNER JOIN utilizadores u on m.codigoUtilizador=u.idUtilizador where m.dataAtendimento=curdate()");
        } else if (resposta == JOptionPane.NO_OPTION) {
            mostrarAgenda("SELECT m.idMarcacao, p.nomeCompleto,u.nomeCompleto, s.designacao, me.nomeCompleto, m.dataAtendimento FROM marcacaoconsulta m\n"
                    + "INNER JOIN pacientes p on m.codigoPaciente=p.idPaciente\n"
                    + "INNER JOIN servicos s on m.codigoServico = s.idServico\n"
                    + "INNER JOIN medicos me on m.codigoMedico=me.idMedico\n"
                    + "INNER JOIN utilizadores u on m.codigoUtilizador=u.idUtilizador where m.dataAtendimento=curdate()");
        }


    }//GEN-LAST:event_jButton6ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String codigo = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
        int codigoMedico = controllerUsuario.getCodigoMedico(jComboBox4.getSelectedItem().toString());
        int resposta = JOptionPane.showConfirmDialog(null, "Deseja realmente mudar o médico?", "Atenção", JOptionPane.YES_NO_OPTION);
        if (resposta == JOptionPane.YES_OPTION) {
            controllerMarcarcaoConsulta.editar(codigo, codigoMedico);
            mostrarAgenda("SELECT m.idMarcacao, p.nomeCompleto,u.nomeCompleto, s.designacao, me.nomeCompleto, m.dataAtendimento FROM marcacaoconsulta m\n"
                    + "INNER JOIN pacientes p on m.codigoPaciente=p.idPaciente\n"
                    + "INNER JOIN servicos s on m.codigoServico = s.idServico\n"
                    + "INNER JOIN medicos me on m.codigoMedico=me.idMedico\n"
                    + "INNER JOIN utilizadores u on m.codigoUtilizador=u.idUtilizador where m.dataAtendimento=curdate()");
        } else if (resposta == JOptionPane.NO_OPTION) {
            mostrarAgenda("SELECT m.idMarcacao, p.nomeCompleto,u.nomeCompleto, s.designacao, me.nomeCompleto, m.dataAtendimento FROM marcacaoconsulta m\n"
                    + "INNER JOIN pacientes p on m.codigoPaciente=p.idPaciente\n"
                    + "INNER JOIN servicos s on m.codigoServico = s.idServico\n"
                    + "INNER JOIN medicos me on m.codigoMedico=me.idMedico\n"
                    + "INNER JOIN utilizadores u on m.codigoUtilizador=u.idUtilizador where m.dataAtendimento=curdate()");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String codigo = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
        int codigoMedico = controllerUsuario.getCodigoMedico(jComboBox4.getSelectedItem().toString());
        int resposta = JOptionPane.showConfirmDialog(null, "Deseja realmente remarcar a consulta, verifica a data e o nome do Médico?", "Atenção", JOptionPane.YES_NO_OPTION);
        if (resposta == JOptionPane.YES_OPTION) {
            controllerMarcarcaoConsulta.getRemarcarcao(codigo, codigoMedico, getData1());
            relatorioServicos.getMarcacao(Integer.parseInt(codigo));
            mostrarAgenda("SELECT m.idMarcacao, p.nomeCompleto,u.nomeCompleto, s.designacao, me.nomeCompleto, m.dataAtendimento FROM marcacaoconsulta m\n"
                    + "INNER JOIN pacientes p on m.codigoPaciente=p.idPaciente\n"
                    + "INNER JOIN servicos s on m.codigoServico = s.idServico\n"
                    + "INNER JOIN medicos me on m.codigoMedico=me.idMedico\n"
                    + "INNER JOIN utilizadores u on m.codigoUtilizador=u.idUtilizador where m.dataAtendimento=curdate()");
        } else if (resposta == JOptionPane.NO_OPTION) {
            mostrarAgenda("SELECT m.idMarcacao, p.nomeCompleto,u.nomeCompleto, s.designacao, me.nomeCompleto, m.dataAtendimento FROM marcacaoconsulta m\n"
                    + "INNER JOIN pacientes p on m.codigoPaciente=p.idPaciente\n"
                    + "INNER JOIN servicos s on m.codigoServico = s.idServico\n"
                    + "INNER JOIN medicos me on m.codigoMedico=me.idMedico\n"
                    + "INNER JOIN utilizadores u on m.codigoUtilizador=u.idUtilizador where m.dataAtendimento=curdate()");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    public boolean limiteAtingido() {
        if (controllerMarcarcaoConsulta.getLimiteDiario(getCodigoUtilizarMedico()) <= controllerMarcarcaoConsulta.getTotalConsultasAgendadasPorMedico(getCodigoUtilizarMedico(), getDataConsulta())) {
            return true;
        }
        return false;
    }

    public int getCodigoUtilizarMedico() {
        return controllerUsuario.getCodigoMedico(jComboBox2.getSelectedItem().toString());
    }

    public int getCodigoUtilizarMedico1() {
        return controllerUsuario.getCodigoMedico(jComboBox4.getSelectedItem().toString());
    }

    public int getCodigoUtente() {
        return controllerBeneficiario.getCodigoUtente(jComboBox1.getSelectedItem().toString());
    }

    public int getCodigoServico() {
        return controllerServico.getCodigoServico(jComboBox3.getSelectedItem().toString());
    }

//    public int getCodigoUtilizador() {
//        return controllerUsuario.getCodigoUtilizador(jComboBox2.getSelectedItem().toString());
//    }
    public int getHora() {
        return (int) hora.getValue();
    }

    public int getMinuto() {
        return (int) minuto.getValue();
    }

    public int getSegundo() {
        return (int) segundos.getValue();
    }

    public Date getData() {
        return d.converteDataSql(jDateChooser1.getDate());
    }

    public String getDataConsulta() {
        String dataSelecionada = "2015-03-07";

        if (jDateChooser1.getDate() != null) {
            GregorianCalendar gc = new GregorianCalendar();
            gc.setTime(jDateChooser1.getDate());
            dataSelecionada = gc.get(GregorianCalendar.YEAR) + "-"
                    + (gc.get(GregorianCalendar.MONTH) + 1) + "-"
                    + gc.get(GregorianCalendar.DATE);
        }
        return dataSelecionada;
    }

    public Date getData1() {
        return d.converteDataSql(jDateChooser2.getDate());
    }

    public String getDataActual() {
        Calendar calendario = Calendar.getInstance();

        //buscar data
        int dia = calendario.get(Calendar.DAY_OF_MONTH);
        int mes = calendario.get(Calendar.MONTH);
        int ano = calendario.get(Calendar.YEAR);

        int h = calendario.get(Calendar.HOUR_OF_DAY);
        int m = calendario.get(Calendar.MINUTE);
        int s = calendario.get(Calendar.SECOND);

        String data = ano + "-" + (mes + 1) + "-" + dia + " " + h + ":" + m + ":" + s;
        //String data = ano + "-" + (mes + 1) + "-" + dia;

        return data;
    }

    public String getHoraConsulta() {
        Time t = new Time(getHora(), getMinuto(), getSegundo());
        return t.toString();
    }

    public String getObservacao() {
        return jTextArea1.getText();
    }

    public void salvar() {
        int limitemedico = controllerMarcarcaoConsulta.getLimiteDiario(getCodigoUtilizarMedico());
        System.out.println("Limite do medico:" + limitemedico);
        int limiteconsulta = controllerMarcarcaoConsulta.getTotalConsultasAgendadasPorMedico(getCodigoUtilizarMedico(), getDataConsulta());
        int codigoSeguro = controllerBeneficiario.getCodigoSeguro(getCodigoUtente());
        double precoParticular = controllerServico.getPrecoParticular(jComboBox3.getSelectedItem().toString());
        double ensa = controllerServico.getPrecoAdvance(jComboBox3.getSelectedItem().toString());
        double saham = controllerServico.getPrecoSaham(jComboBox3.getSelectedItem().toString());
        double angolatelecom = controllerServico.getPrecoAngolaTelecom(jComboBox3.getSelectedItem().toString());
        double saudemais = controllerServico.getPrecoSaudemais(jComboBox3.getSelectedItem().toString());
        double unisaude = controllerServico.getPrecoUnisaude(jComboBox3.getSelectedItem().toString());
        double fidelidade = controllerServico.getPrecoFidelidade(jComboBox3.getSelectedItem().toString());
        double anst = controllerServico.getPrecoEmpresa(jComboBox3.getSelectedItem().toString());

        if (!controllerMarcarcaoConsulta.consultaExistente(getCodigoUtente(), getCodigoUtilizarMedico(), getCodigoServico(), getDataConsulta())) {
            if (limiteconsulta <= limitemedico) {
                marcacaoConsulta.setCodigoUtlizador(user);
                marcacaoConsulta.setCodigoMedico(getCodigoUtilizarMedico());
                marcacaoConsulta.setCodigoPaciente(getCodigoUtente());
                marcacaoConsulta.setCodigoServico(getCodigoServico());
                marcacaoConsulta.setDataAtendimento(getData());
                marcacaoConsulta.setDataMarcacao(getDataActual());
                marcacaoConsulta.setHora(getHoraConsulta());
                marcacaoConsulta.setObservacao(getObservacao());
                marcacaoConsulta.setEstado("Não urgente (Azul) - Atendimento em até 4 horas.");
                marcacaoConsulta.setCodigoEstado(1);
                if (codigoSeguro == 8 || codigoSeguro == 19) {
                    marcacaoConsulta.setPreco(precoParticular);
                    controllerMarcarcaoConsulta.salvar(marcacaoConsulta);
                }
                if (codigoSeguro == 1 || codigoSeguro == 2 || codigoSeguro == 3 || codigoSeguro == 4 || codigoSeguro == 5 || codigoSeguro == 6 || codigoSeguro == 7 || codigoSeguro == 15) {
                    marcacaoConsulta.setPreco(ensa);
                    controllerMarcarcaoConsulta.salvar(marcacaoConsulta);
                }
                if (codigoSeguro == 9) {
                    marcacaoConsulta.setPreco(angolatelecom);
                    controllerMarcarcaoConsulta.salvar(marcacaoConsulta);
                }
                if (codigoSeguro == 10) {
                    marcacaoConsulta.setPreco(anst);
                    controllerMarcarcaoConsulta.salvar(marcacaoConsulta);
                }
                if (codigoSeguro == 11) {
                    marcacaoConsulta.setPreco(saham);
                    controllerMarcarcaoConsulta.salvar(marcacaoConsulta);
                }
                if (codigoSeguro == 12) {
                    marcacaoConsulta.setPreco(unisaude);
                    controllerMarcarcaoConsulta.salvar(marcacaoConsulta);
                }
                if (codigoSeguro == 13) {
                    marcacaoConsulta.setPreco(saudemais);
                    controllerMarcarcaoConsulta.salvar(marcacaoConsulta);
                }
                if (codigoSeguro == 14) {
                    marcacaoConsulta.setPreco(fidelidade);
                    controllerMarcarcaoConsulta.salvar(marcacaoConsulta);
                }
                if (codigoSeguro == 16) {
                    marcacaoConsulta.setPreco(anst);
                    controllerMarcarcaoConsulta.salvar(marcacaoConsulta);
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Consulta já foi marcada");
        }

    }

    public boolean horaConsultaValida() {
        Date datConsulta = jDateChooser1.getDate();
        Date dataActual = new Date();
        datConsulta.setHours(getHora());
        datConsulta.setMinutes(getMinuto());

        if (datConsulta.compareTo(dataActual) >= 0) {
            return true;
        }
        return false;
    }

    public final void mostrarAgenda(String sql) {
        System.out.println("Teste:" + sql);
        try {
            con = new ConexaoBancos().ConexaoBD();
            PreparedStatement ps;
            ResultSet rs;
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getTableHeader().setReorderingAllowed(false);
            jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_OFF);
            jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            model.setNumRows(0);
            while (rs.next()) {
                model.addRow(new String[]{rs.getString("m.idMarcacao"), rs.getString("p.nomeCompleto"), rs.getString("u.nomeCompleto"), rs.getString("s.designacao"),
                    rs.getString("me.nomeCompleto"), rs.getString("m.dataAtendimento")
                });
            }
        } catch (Exception ex) {
            System.out.println("Erro!!!" + ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarcacaoConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarcacaoConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarcacaoConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarcacaoConsultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new MarcacaoConsultas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JSpinner hora;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JSpinner minuto;
    private javax.swing.JSpinner segundos;
    // End of variables declaration//GEN-END:variables
}
